const fs = require('fs')
const path = require('path')
const LRU = require('lru-cache')
const express = require('express')
const compression = require('compression')
const microcache = require('route-cache')
const resolve = file => path.resolve(__dirname, file)
const { createBundleRenderer } = require('vue-server-renderer')
const isProd = process.env.NODE_ENV === 'production'
const useMicroCache = process.env.MICRO_CACHE !== 'false'
const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

const app = express()
const template = fs.readFileSync(resolve('./src/index.template.html'), 'utf-8')

function createRenderer (bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(bundle, Object.assign(options, {
    template,
    // 组件及缓存，需要在组件内配置 serverCacheKey 才会生效
    // 这里使用的是 LRU-Cache，也可以使用 redis 作为 cache
    // 具体实现参考：https://ssr.vuejs.org/zh/api.html#cache
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('./dist'),
    // 如果要使用 global.__VUE_SSR_CONTEXT__ 那么久需要开启 runInNewContext
    // 但是开启后，对性能有损耗，所以这里还是不开启
    runInNewContext: false
  }))
}

let renderer
let readyPromise
if (isProd) {
  // In production: create server renderer using built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const bundle = require('./dist/vue-ssr-server-bundle.json')
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require('./dist/vue-ssr-client-manifest.json')
  renderer = createRenderer(bundle, {
    clientManifest
  })
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require('./build/setup-dev-server')(app, (bundle, options) => {
    renderer = createRenderer(bundle, options)
  })
}

app.use(compression({ threshold: 0 }))
app.use('/dist', express.static('./dist'))

// 这里虽然配置了页面缓存，但是并没有在 renderToString 方法里 get / set 缓存
// 并且在 user special 页面里，尽量不使用缓存，但这里的缓存是 1s，因此也是合理的
// https://ssr.vuejs.org/zh/caching.html#component-level-caching
app.use(microcache.cacheSeconds(1, req => useMicroCache && req.originalUrl))

function render (req, res, next) {
  const s = Date.now()
  res.setHeader("Content-Type", "text/html")
  res.setHeader("Server", serverInfo)

  renderer.renderToString({
    title: 'mindweaver',
    url: req.url
  }, (err, html) => {
    if (err) {
      return next(new Error(err))
    }
    res.send(html)
    if (!isProd) {
      console.log(`whole request: ${Date.now() - s}ms`)
    }
  })
}

app.get('*', isProd ? render : (req, res, next) => {
  readyPromise.then(() => render(req, res, next))
})

app.use(function onError(err, req, res, next) {
  if (err.url) {
    res.redirect(err.url)
  }
  if (err.code === 404) {
    res.status(404).send('404 | Page Not Found')
  }
  res.status(500).send('500 | Internal Server Error')
  console.error(`error during render : ${req.url}`)
  console.error(err.stack)
})

const port = process.env.PORT || 9000
app.listen(port, () => {
  console.log(`server started at localhost:${port}`)
})
